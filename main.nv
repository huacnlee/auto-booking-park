use std.net.http;
use std.io;
use std.value;
use std.json;
use std.env;
use std.time;
use std.process;

let OPTYPE_LIST_ORDERS = 0;
let OPTYPE_CHECK_AVAILABLE = 2;

let OPENID = env.get("BOOK_OPENID");
let TEL = env.get("BOOK_TEL");
let ENDPOINT = env.get("BOOK_ENDPOINT");

if (OPENID == nil) {
    io.println("请设置环境变量 BOOK_OPENID");
    process.exit(1);
}
if (TEL == nil) {
    io.println("请设置环境变量 BOOK_TEL");
    process.exit(1);
}
if (ENDPOINT == nil) {
    io.println("请设置环境变量 BOOK_ENDPOINT");
    process.exit(1);
}

fn querystring(obj: value.Value): string {
    let queries = [string] {};
    let items = obj.object()!;
    for (let k, v in items) {
        queries.push(`${k}=${v}`);
    }
    return queries.join("&");
}

fn send_request(payload: value.Value): value.Value? {
    let headers = http.new_headers();
    headers.set("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8");

    let req = http.new_request(
        method: "POST",
        url: ENDPOINT,
        headers: headers,
        body: querystring(payload).bytes()
    );

    let res = req.send();

    if (res.status() != 200) {
        io.println(`请求失败，状态码：${res.status()}, text: ${res.text()}`);
        return nil;
    }
    
    return res.json();
}

fn get_list() {
    send_request(json.parse(`{
        "optype": ${OPTYPE_LIST_ORDERS},
        "openid": "${OPENID}"
    }`));
}

fn check_available() {
    let day = time.now().format("%Y-%m-%d");
    let res = send_request(json.parse(`{
        "optype": ${OPTYPE_CHECK_AVAILABLE},
        "openid": "${OPENID}",
        "tel": "${TEL}",
        "day": "${day}",
        "comId": 21
    }`));

    if (res == nil) {
        return;
    }

    let can_count = res?.get("canCarNum")?.int()!;
    io.println(`Today available: ${can_count}`);
}

fn main() {
    check_available();
}

main();

test "test querystring" {
    let obj = json.parse(`{
        "optype": 0,
        "openid": "12345"
    }`);
    let qs = querystring(obj);
    assert qs == "optype=0&openid=12345";
}