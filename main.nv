use std.net.http.{self, Headers, Request, Response};
use std.io;
use std.json;
use std.env;
use std.time;
use std.process;
use std.querystring;

/// optype: [2- check status, 3 - submit booking, 4 - list, 5 - delete]

let OPENID = env.get("BOOK_OPENID");
let ENDPOINT = env.get("BOOK_ENDPOINT");

struct BookResult {
    /// message, default: ""
    msg: string = "",
    /// 1 - success, 0 - failed, 2 - already booked, default: 0
    status: int = 0,
}

impl BookResult {
    fn new(): BookResult {
        return BookResult {};
    }
}

type Query = <string, string>;

fn send_request(path: string, payload: Query): Response throws {
    let headers = Headers.new();
    headers.set("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8");

    let req = try Request.new(
        method: "POST",
        url: `${ENDPOINT}${path}`,
        headers: headers,
        body: querystring.to_string(payload).bytes()
    );

    let res = try req.send();

    if (res.status != 200) {
        throw `请求失败，状态码：${res.status}, text: ${try! res.text()}`;
    }

    io.println(`send_request res: ${try! res.text()}`);
    return res;
}

struct OrderResult {
    #[serde(rename = "carLogs")]
    car_logs: [CarLog]?,
}

struct CarLog {
    car: string?,
    day: string?,
    status: string?,
}

fn get_orders(): string throws {
    let tel: string = env.get("BOOK_TEL")!;

    let res = try send_request(
        "/fanMuUser/getBingdPhone",
        {
            "optype": "4",
            "openid": OPENID!,
            "tel": tel
        }
    );
    let data = try res.json::<OrderResult>();

    let msgs: [string] = {};

    let msg = try check_available(tel);
    msgs.push(msg);

    if (data.car_logs == nil) {
        io.println(`carLogs is not array, data: ${data}`);
    }

    for (let log in data.car_logs!) {
        msgs.push(`车牌: ${log.car}, 日期: ${log.day}`);

        if (msgs.len() > 5) {
            break;
        }
    }

    return msgs.join("\n");
}

fn check_available(tel: string): string throws {
    let day = time.now().format("%Y-%m-%d")!;
    let res = try send_request(
        "/fanMuUser/getBingdPhone",
        {
            "optype": "2",
            "openid": OPENID!,
            "tel": tel,
            "day": day,
            "comId": "21"
        }
    );

    let data = try res.json::<<string, int?>?>();

    if (data == nil) {
        return "";
    }

    let can_count = data?.get("canCarNum");
    return `Today available: ${can_count}`;
}

struct SubmitResult {
    #[serde(rename = "opStatus")]
    op_status: int,
    #[serde(rename = "isLoged")]
    is_loged: bool,
}

impl SubmitResult {
    fn to_string(self): string {
        return try! json.to_string(self);
    }
}

fn submit_book(day: string, car_code: string, tel: string, retry: bool = true): BookResult throws {
    let result = BookResult.new();

    io.println(`Submiting book for car: ${car_code} day: ${day}`);

    let res = try send_request(
        "/fanMuUser/getBingdPhone",
        {
            "optype": "3",
            "day": day,
            "openid": OPENID!,
            "tel": tel,
            "comId": "21",
            "carCodeAll": car_code
        }
    );

    let data = try res.json::<SubmitResult>();

    io.println(`=> submit_book res:\n${data}`);
    let op_status = data.op_status;
    let is_loged = data.is_loged;

    if (op_status == 1) {
        result.msg = `[预约成功] 车牌: ${car_code}, 日期: ${day}\n\n${data}`;
        result.status = 1;
    } else {
        if (is_loged == true) {
            result.msg = `[车牌已约] 车牌: ${car_code} 已经有预约了, 日期: ${day}\n\n${data}`;
            result.status = 2;
        } else {
            result.msg = `[预约失败] 车牌: ${car_code}, 日期: ${day}\n\n${data}`;
            result.status = 0;
            // retry again

            if (retry) {
                io.println(`RETRY AGAIN\n---------------------\n${result.msg}`);
                return try submit_book(day, car_code, tel, retry: false);
            }
        }
    }

    return result;
}

fn notify_feishu(msg: string) {
    if (env.get("CI") == nil) {
        io.println(`notify_feishu: ${msg}`);
        return;
    }

    let headers = Headers.new();
    headers.set("Content-Type", "application/json");

    let msg = msg.replace("\n", "\\n");

    let payload = `{
        "msg_type": "text",
        "content": {
            "text": "${msg}"
        }
    }`;

    let res = try! http.post(
        env.get("FEISHU_WEBHOOK_URL")!,
        headers: headers,
        body: payload.bytes()
    );

    if (res.status != 200) {
        let text = try! res.text();
        io.println(`\nFeishu Notify failed, body:\n${text}`);
    }
}

fn main() throws {
    if (OPENID == nil) {
        io.println("请设置环境变量 BOOK_OPENID");
        process.exit(1);
    }
    if (ENDPOINT == nil) {
        io.println("请设置环境变量 BOOK_ENDPOINT");
        process.exit(1);
    }

    // Exit if time is not at 17:00
    let now = time.now();
    // In UTC is 17 - 8 = 09:00
    let is_right_time = now.hour() == 9;

    let tel = env.get("BOOK_TEL")!;
    let tel_b = env.get("BOOK_TEL_B")!;

    try check_available(tel);

    let date = time.now() + 1.days();
    let day = date.format("%Y-%m-%d")!;

    let car_code = env.get("BOOK_CARCODE")!;
    if (date.weekday() == 3) {
        car_code = env.get("BOOK_CARCODE1")!;
    }
    let result = try submit_book(day, car_code, tel);
    io.println(result.msg);

    if (is_right_time) {
        if (result.status != 2) {
            notify_feishu(result.msg);
        }
    }

    let car_code_b = env.get("BOOK_CARCODE_B")!;
    if (date.weekday() == 4) {
        car_code_b = env.get("BOOK_CARCODE_B1")!;
    }
    let result_b = try submit_book(day, car_code_b, tel_b);
    io.println(result_b.msg);

    if (is_right_time) {
        if (result_b.status != 2) {
            notify_feishu(result_b.msg);
        }

        if (result.status != 2 || result_b.status != 2) {
            let msg = try get_orders();
            io.println(msg);
            notify_feishu(msg);
        }
    }
}

test "test querystring" {
    let qs = try! querystring.to_string(<string, string> { "optype": "0", "openid": "12345" });
    assert_eq qs, "openid=12345&optype=0";
}

test "book_result" {
    let result = BookResult.new();
    assert_eq result.status, 0;
    assert_eq result.msg, "";
}
