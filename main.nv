use std.net.http;
use std.io;
use std.value;
use std.json;
use std.env;
use std.time;
use std.process;
use std.querystring;

/// optype: [2- check status, 3 - submit booking, 4 - list, 5 - delete]

let OPENID = env.get("BOOK_OPENID");
let ENDPOINT = env.get("BOOK_ENDPOINT");

struct BookResult {
    msg: string,
    /// 1 - success, 0 - failed, 2 - already booked
    status: int,
}

fn send_request(path: string, payload: value.Value): value.Value? {
    let headers = http.new_headers();
    headers.set("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8");

    let req = http.new_request(
        method: "POST",
        url: `${ENDPOINT}${path}`,
        headers: headers,
        body: querystring.to_string(payload).bytes()
    );

    let res = req.send();

    if (res.status != 200) {
        io.println(`请求失败，状态码：${res.status}, text: ${res.text()}`);
        return nil;
    }

    io.println(`send_request res: ${res.text()}`);
    return res.json();
}

fn get_orders(): string {
    let tel = env.get("BOOK_TEL")!;
    let payload = json.parse(`{
        "optype": 4,
        "openid": "${OPENID}",
        "tel": "${tel}"
    }`);
    let data = send_request("/fanMuUser/getBingdPhone", payload);

    let msgs = [string] {};

    let msg = check_available(tel);
    msgs.push(msg);

    if (data?.get("carLogs")?.is_array() == false) {
        io.println(`carLogs is not array, data: ${data}`);
    }

    let logs = data?.get("carLogs")?.array()!;
    for (let log in logs) {
        let car_code = log.get("car")?.string();
        let day = log.get("day")?.string();
        let status = log.get("status")?.string();
        msgs.push(`车牌: ${car_code}, 日期: ${day}`);
        if (msgs.len() > 5) {
            break;
        }
    }

    return msgs.join("\n");
}

fn check_available(tel: string): string {
    let day = time.now().format("%Y-%m-%d");
    let data = send_request(
        "/fanMuUser/getBingdPhone",
        json.parse(`{
            "optype": 2,
            "openid": "${OPENID}",
            "tel": "${tel}",
            "day": "${day}",
            "comId": 21
        }`)
    );

    if (data == nil) {
        return "";
    }

    let can_count = data?.get("canCarNum")?.int()!;
    return `Today available: ${can_count}`;
}

fn submit_book(day: string, card_code: string, tel: string, retry: bool = true): BookResult {
    let result = BookResult { msg: "", status: 0 };

    io.println(`Submiting book for car: ${card_code} day: ${day}`);

    let data = send_request(
        "/fanMuUser/getBingdPhone",
        json.parse(`{
            "optype": 3,
            "day": "${day}",
            "openid": "${OPENID}",
            "tel": "${tel}",
            "comId": 21,
            "carCodeAll": "${card_code}"
        }`)
    );

    io.println(`=> submit_book res:\n${data}`);
    let op_status = data?.get("opStatus")?.int();
    let is_loged = data?.get("isLoged")?.bool();

    if (op_status == 1) {
        result.msg = `[预约成功] 车牌: ${card_code}, 日期: ${day}\n\n${data}`;
        result.status = 1;
    } else {
        if (is_loged == true) {
            result.msg = `[车牌已约] 车牌: ${card_code} 已经有预约了, 日期: ${day}\n\n${data}`;
            result.status = 2;
        } else {
            result.msg = `[预约失败] 车牌: ${card_code}, 日期: ${day}\n\n${data}`;
            result.status = 0;
            // retry again

            if (retry) {
                io.println(`RETRY AGAIN\n---------------------\n${result.msg}`);
                return submit_book(day, card_code, tel, retry: false);
            }
        }
    }

    return result;
}

fn notify_feishu(msg: string) {
    if (env.get("CI") == nil) {
        io.println(`notify_feishu: ${msg}`);
        return;
    }

    let headers = http.new_headers();
    headers.set("Content-Type", "application/json");

    let msg = msg.replace("\n", "\\n");

    let payload = json.parse(`{
        "msg_type": "text",
        "content": {
            "text": "${msg}"
        }
    }`);

    let res = http.post(
        env.get("FEISHU_WEBHOOK_URL")!,
        headers: headers,
        body: payload.to_json().bytes()
    );

    if (res.status != 200) {
        let data = res.json();
        io.println(`\nFeishu Notify failed, body:\n${data}`);
    }
}

fn main() {
    if (OPENID == nil) {
        io.println("请设置环境变量 BOOK_OPENID");
        process.exit(1);
    }
    if (ENDPOINT == nil) {
        io.println("请设置环境变量 BOOK_ENDPOINT");
        process.exit(1);
    }

    // Exit if time is not at 17:00
    let now = time.now();
    if (now.hour() < 17) {
        io.println(`当前时间: ${now.format("%Y-%m-%d %H:%M:%S")}，未到可预约时间，退出`);
        process.exit(0);
    }

    let tel = env.get("BOOK_TEL")!;
    let tel_b = env.get("BOOK_TEL_B")!;

    check_available(tel);

    let date = time.now() + 1.days();
    let day = date.format("%Y-%m-%d");

    let car_code = env.get("BOOK_CARCODE")!;
    if (date.weekday() == 3) {
        car_code = env.get("BOOK_CARCODE1")!;
    }
    let result = submit_book(day, car_code, tel);
    io.println(result.msg);
    if (result.status != 2) {
        notify_feishu(result.msg);
    }

    let car_code_b = env.get("BOOK_CARCODE_B")!;
    if (date.weekday() == 4) {
        car_code_b = env.get("BOOK_CARCODE_B1")!;
    }
    let result_b = submit_book(day, car_code_b, tel_b);
    io.println(result_b.msg);
    if (result_b.status != 2) {
        notify_feishu(result_b.msg);
    }

    if (result.status != 2 || result_b.status != 2) {
        let msg = get_orders();
        io.println(msg);
        notify_feishu(msg);
    }
}

test "test querystring" {
    let obj = json.parse(`{
        "optype": 0,
        "openid": "12345"
    }`);
    let qs = querystring.to_string(obj);
    assert_eq qs, "openid=12345&optype=0";
}

